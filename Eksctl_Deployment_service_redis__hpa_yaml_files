ubuntu@ip-172-31-31-52:~$ vi deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
   name: vote
spec:
   replicas: 3
   selector:
      matchLabels:
          app: capstoneapp
   template:
      metadata:
         labels:
            app: capstoneapp
      spec:
        containers:
        - name: capstoneapp
          image: 058362172342.dkr.ecr.us-east-1.amazonaws.com/capstoneecr:latest
        tolerations:
        - key: app
          operator: Equal
          effect: NoSchedule
          value: capstone
        affinity:
           nodeAffinity:
             requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - capstone


ubuntu@ip-172-31-31-52:~$ vi service.yaml

apiVersion: v1
kind: Service
metadata:
  name: vote-service
spec:
  selector:
    app: vote
  ports:
    - port: 8081
      targetPort: 8081
  type: LoadBalancer


---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: my-eks-201 # name of cluster
  region: us-east-1
  version: "1.27" # kubernetes version
vpc: # Refer: https://github.com/weaveworks/eksctl/blob/main/examples/04-existing-vpc.yaml
  id: "vpc-06b3d7764cbbcc9d6"
  subnets:
    public:
      my-public-201-a:
        id: "subnet-0be68af2427eaf3e7"
        az: "us-east-1a"
      my-public-201-b:
        id: "subnet-0cbf5e315edf44ba2"
        az: "us-east-1b"
    private:
      my-private-201-a:
        id: "subnet-0374fd7cc835f3f32"
        az: "us-east-1a"
      my-private-201-b:
        id: "subnet-0b9ae7eaae89d08a7"
        az: "us-east-1b"
  clusterEndpoints:
    publicAccess:  true
    privateAccess: true
  nat:
    gateway: Disable # disable since already created

iam: # Refer: https://eksctl.io/usage/iamserviceaccounts/
  withOIDC: true
  serviceAccounts: # pre-including some common iamserviceaccounts
  - metadata:
      name: aws-load-balancer-controller
      namespace: kube-system
    wellKnownPolicies:
      awsLoadBalancerController: true
  - metadata:
      name: ebs-csi-controller-sa
      namespace: kube-system
    wellKnownPolicies:
      ebsCSIController: true
  - metadata:
      name: efs-csi-controller-sa
      namespace: kube-system
    wellKnownPolicies:
      efsCSIController: true
  - metadata:
      name: external-dns
      namespace: kube-system
    wellKnownPolicies:
      externalDNS: true
  - metadata:
      name: cert-manager
      namespace: cert-manager
    wellKnownPolicies:
      certManager: true
  - metadata:
      name: cluster-autoscaler
      namespace: kube-system
      labels: {aws-usage: "cluster-ops"}
    wellKnownPolicies:
      autoScaler: true

nodeGroups: # Refer: https://github.com/weaveworks/eksctl/blob/main/examples/05-advanced-nodegroups.yaml
  - name: pvt-201-a-1
    labels: { role: workers }
    tags:
      k8s.io/cluster-autoscaler/enabled: "true" # tag is needed for cluster autoscaler. Refer: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md#auto-discovery-setup
      k8s.io/cluster-autoscaler/my-eks-201: "shared" # cluster name tag is optional in latest versions of EKS
    instancesDistribution:
      instanceTypes:
        - t2.medium
    desiredCapacity: 1
    minSize: 1
    maxSize: 3
    privateNetworking: true # include only in private subnet
    subnets:
      - my-private-201-a # 1 AZ is enough for testing
  - name: pub-201-a-1
    labels: { role: workers }
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/my-eks-201: "shared"
    instancesDistribution:
      instanceTypes:
        - t2.medium
    desiredCapacity: 1
    minSize: 1
    maxSize: 1
    subnets:
      - my-public-201-a
  - name: pub-201-a-2
    labels: { role: workers }
    taints:
      - key: app
        value: "capstone"
        effect: NoSchedule
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/my-eks-201: "shared"
    instancesDistribution:
      instanceTypes:
        - t2.medium
    desiredCapacity: 1
    minSize: 1
    maxSize: 1
    subnets:
      - my-public-201-a


ubuntu@ip-172-31-22-62:~$ cat redis.yaml 
auth:
  enabled: false
master:
  resources:
    limits:
     cpu: 200m
     memory: 200Mi 


ubuntu@ip-172-31-22-62:~$ vi hpa.yaml 

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: php-apache
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: php-apache
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50


